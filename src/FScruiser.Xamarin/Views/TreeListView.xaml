<?xml version="1.0" encoding="utf-8" ?>
<controls:InitializableContentPage  xmlns:controls="clr-namespace:FScruiser.XF.Controls"
                                    xmlns="http://xamarin.com/schemas/2014/forms"
                                    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
                                    xmlns:viewmodels="clr-namespace:FScruiser.XF.ViewModels"
                                    xmlns:behaviors="clr-namespace:FScruiser.XF.Behaviors"
                                    xmlns:converters="clr-namespace:FScruiser.XF.Converters"
                                    xmlns:dg="clr-namespace:Xamarin.Forms.DataGrid;assembly=Xamarin.Forms.DataGrid"
                                    x:Class="FScruiser.XF.Views.TreeListView"
                                    x:Name="_page"
                                    BackgroundColor="White"
                                    Title="{Binding Title}"
                                    AutomationProperties.IsInAccessibleTree="True"
                                    AutomationProperties.Name="Tree List Page">
    <StackLayout>
        <StackLayout Orientation="Horizontal"
                     HorizontalOptions="EndAndExpand"
                     Margin="5,0">
            <Label Text="Only Trees With Errors"
                   VerticalTextAlignment="Center"
                   AutomationProperties.IsInAccessibleTree="True" />
            <Switch IsToggled="{Binding OnlyShowTreesWithErrorsOrWarnings}"
                    HeightRequest="{StaticResource minTouchableHeight}"
                    AutomationProperties.IsInAccessibleTree="True"
                    AutomationProperties.Name="Only Show Trees With Errors Toggle" />
        </StackLayout>

        <dg:NGDataGrid x:Name="_treesDataGrid"
                       Columns="{Binding TreeFields, Converter={StaticResource treeFieldToDataGridColumnConverter}}"
                       ItemsSource="{Binding Trees}"
                       VerticalOptions="FillAndExpand"
                       SelectionMode="Single"
                       BackgroundColor="White">
            <dg:NGDataGrid.Resources>
                <ResourceDictionary>
                    <converters:TreeFieldToDataGridColumnConverter x:Key="treeFieldToDataGridColumnConverter" />
                </ResourceDictionary>
            </dg:NGDataGrid.Resources>

            <dg:NGDataGrid.RowsBackgroundColorPalette>
                <dg:PaletteCollection>
                    <Color>#FFFFFF</Color>
                </dg:PaletteCollection>
            </dg:NGDataGrid.RowsBackgroundColorPalette>
        </dg:NGDataGrid>

        <StackLayout Orientation="Horizontal"
                     VerticalOptions="End">
            <StackLayout.Resources>
                <ResourceDictionary>
                    <Style TargetType="Button"
                           BasedOn="{StaticResource button_base}">
                        <Setter Property="BackgroundColor"
                                Value="{StaticResource primary_500}" />
                        <Setter Property="HeightRequest"
                                Value="60" />
                    </Style>
                </ResourceDictionary>
            </StackLayout.Resources>
            <!--<Button x:Name="_goToEndButton"
                    Image="ic_chevron_double_down_white_24dp.png"
                    AutomationProperties.IsInAccessibleTree="True"
                    AutomationProperties.Name="Scroll to End Button" />-->
            <Button x:Name="_editTreeButton"
                    Image="ic_edit_white_24dp.png"
                    Command="{Binding EditTreeCommand}"
                    CommandParameter="{Binding SelectedItem, Source={Reference _treesDataGrid}}"
                    AutomationProperties.IsInAccessibleTree="True"
                    AutomationProperties.Name="Edit Tree">
                <!--<VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor"
                                        Value="Red" />
                            </VisualState.Setters>
                        </VisualState>
                        <VisualState x:Name="Disabled">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor"
                                        Value="Blue" />
                            </VisualState.Setters>
                        </VisualState>

                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Button.Triggers>
                    <DataTrigger TargetType="Button"
                                 Binding="{Binding SelectedItem, Source={Reference _treesDataGrid}, Converter={StaticResource myNotNullConverter}}"
                                 Value="False">
                        <Setter Property="IsEnabled"
                                Value="False" />
                    </DataTrigger>

                </Button.Triggers>-->
            </Button>

            <Button x:Name="_addTreeButton"
                    Image="ic_plus_white_24dp.png"
                    Command="{Binding AddTreeCommand}"
                    FontSize="30"
                    BackgroundColor="Orange"
                    VerticalOptions="Fill"
                    HorizontalOptions="FillAndExpand"
                    AutomationProperties.IsInAccessibleTree="True"
                    AutomationProperties.Name="Add Tree" />

            <Button x:Name="_deleteTreeButton"
                    Text="Delete"
                    TextColor="White"
                    Command="{Binding DeleteTreeCommand}"
                    CommandParameter="{Binding SelectedItem, Source={Reference _treesDataGrid}}"
                    AutomationProperties.IsInAccessibleTree="True"
                    AutomationProperties.Name="Delete Tree">
                <!--<VisualStateManager.VisualStateGroups>
                    <VisualStateGroup x:Name="CommonStates">
                        <VisualState x:Name="Normal">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor"
                                        Value="Red" />
                            </VisualState.Setters>
                        </VisualState>
                        <VisualState x:Name="Disabled">
                            <VisualState.Setters>
                                <Setter Property="BackgroundColor"
                                        Value="Blue" />
                            </VisualState.Setters>
                        </VisualState>
                                     
                    </VisualStateGroup>
                </VisualStateManager.VisualStateGroups>
                <Button.Triggers>
                    <DataTrigger TargetType="Button"
                                 Binding="{Binding ABoolProp}"
                                 Value="False">
                        <Setter Property="IsEnabled"
                                Value="False" />
                    </DataTrigger>
                                 
                </Button.Triggers>-->
            </Button>

            <!--<Button x:Name="_goToStartButton"
                    Image="ic_chevron_double_up_white_24dp.png"
                    HorizontalOptions="End"
                    AutomationProperties.IsInAccessibleTree="True"
                    AutomationProperties.Name="Scroll to Start Button" />-->
        </StackLayout>
    </StackLayout>
</controls:InitializableContentPage>